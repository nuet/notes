
Model.find({})
.where('field', 5);
.limit(5);
.skip(100);
.exec(function (err, docs) {
});


Model
.where('age').gte(25)
.where('tags').in(['movie', 'music', 'art'])
.select('name', 'age', 'tags')
.skip(20)
.limit(10)
.asc('age')
.slaveOk()
.hint({ age: 1, name: 1 })
.run(callback);

使用js表达式查询
Model.$where('this.firstname === this.lastname').exec(callback)


Model
.findOne({_id : studentId})  
.populate('clazzID')    //关联查询
.exec(callback)

参考 http://my.oschina.net/antianlu/blog/290899?p=1
 UserModel.User
.findOne({_id:11111,'im.usergroup._id':'53c488bf95ad1de01756db88'},{'im.usergroup.$':1})
.populate('im.usergroup.list._user',{icon:1,nickname:1,_id:1,name:1,remark:1})     //关联查询
.exec(function(err, ug){
    cb(err,ug);
})

参考 http://my.oschina.net/antianlu/blog/283510
commentModel.findOne({ })
    .populate('comments.created_by')  //关联查询
    .exec(function (err, commets) {
            console.log(err,commets);
    })

参考 https://segmentfault.com/q/1010000004241850/a-1020000004247166
//根据id查找user
User.findById(id, function(err, user){
    //遍历user.message，根据msg_id找到想要修改的message
  for(var i = 0; i < user.message.length; i++){
    //如果找到了
    if(user.message[i]._id == msg_id){
      //将read修改为1
      user.message[i].read = 1;
      //混合类型因为没有特定约束，
      //因此可以任意修改，一旦修改了原型，
      //则必须调用markModified()
      //传入read，表示该属性类型发生变化
      user.markModified('read');
      //保存
      user.save(function(err){
          res.json({status: 1, error: '修改成功！'});
          return;
      }); 
    }
  }
}) 



















